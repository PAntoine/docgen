{"body":"#Document Generator#\r\n\r\nBy Peter Antoine\r\nCopyright (c) 2011 Peter Antoine\r\nReleased under the Artistic Licence\r\n\r\n##Why?##\r\n\r\nI need a tool to be able to write documentation that stays in step\r\nwith the code. But, I want to documentation to have the format of\r\na document and not be decided by the code. Also I want to be able\r\nto generate diagrams (state machines and sequence diagrams) from\r\nwithin the code.\r\n\r\nAlso, I want the documentation to be decided by the build system\r\nso that it can be reshaped to match the delivery.\r\n\r\n##What?##\r\n\r\nThis document generation system is built in the style that the code\r\nis built. That is a compiler and a linker. This means that the documentation\r\ncan be generated by rules in the makefile in the same way that the\r\ncode is.\r\n\r\nThe final documentation will be built using a real document that will\r\nreference the generated docs when will then be inserted. This also \r\nmeans that the same data can be placed within the document as many\r\ntimes as required.\r\n\r\nThe input format of the docs will be based on MarkDown. This is a because\r\nMarkDown is simple to use and they are many tools that can convert this\r\ninto any document style.\r\n\r\n##Implementation##\r\n\r\nIt has been implemented as mentioned above as a pair of commands, the compiler (*psdc*)\r\nand the linker (*psdl*). \r\n\r\nThe current compiler generates an output file that is passed into the linker. As this\r\nmodels the intermediate files from compilation this should speed up the generation of\r\nthe documentation as this will only get re-generated when the source files change.\r\n\r\nCurrently, the compiler does not include a pre-processor or depend on the C/C++ one.\r\nIf required it can always be called and have the result passed into the compiler.\r\n\r\nThe current specification is where to look for the state of play \r\n[Spec](https://github.com/PAntoine/doc_gen/blob/master/docs/specification.txt) and\r\nto see how to use it, it will be worth looking at the test suite that will be build\r\non the back of a gmake make systems.\r\n\r\nFor how to use the functions look in the tests as this is a make system that will \r\nbuild the files in the source directory.\r\n\r\n##What's left to do?##\r\n\r\nIt currently only produces simple state diagrams from the source and links them but\r\nonly generates the state diagrams in dot (graphViz) format, just so I can see the\r\nfunctions working.\r\n\r\nThe current plan is to finish the diagram linking and internal diagrams. The create\r\na final object format for the documents and then produce a tool for converting this\r\nto a document.\r\n\r\nThe current formats that are planned to be supported are MarkDown, TeX and HTML. Thought\r\nthe last one can be generated from TeX.\r\n\r\nAlso, need to extend it for different languages, especially looking at VHDL as the \r\nauto generation of state machines would be of really great use.\r\n\r\n##Anyway##\r\n\r\nEnjoy, the stupidity of the above.\r\n\r\nPeter Antoine.\r\n\r\n26th November 2011\r\n\r\n","tagline":"Generates structured documentation from source code.","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Docgen","google":""}