1. Memory Leaks

There are definitely memory leaks in the handling of the triggers in the linker.
The arrays that are added to the node are not cleared down.

Valgrind the f**k out of this code as it is really poor in places.

2. Name allocation

Will have to replace what I have with a lookup table and proper allocation. Too much memory is being used and the names are having to be copied.
Also must use hashes to make the searches quicker.

3. Functions/Activations

This is wrong. What I have currently called a function is actually an activation.

It needs to change so when the C based stuff is include within the build then it can use the function name.

I might be worth adding a "procedure" name into the system to allow for RPC to be done. But is that any different to a @send???

Also, need to add code to allow for the order of the items to be changed. This will be a configuration option.

4. Efficiency

Some of the atoms lists are being searched to add to the end. What is required is an end of list pointer to handle this without searching.

5. Duplication

The message now has a redundant field (timeline) as sender has that information.

6. Configuration

Not sure what I want to do here. Not sure if this should be a command line option and/or a marker in the source file. i.e. like the
/*vim: */ style marker that works for vim. So the magic can be added to the file and kept in the same place without additional configuration
files to be kept. Also, may need to be able to do this by output type. So, [config://pdf-<list of configuration variables>]. These could be
placed at the start/end of the file and then filtered out of the final result.

7. De-HACKify

This code is the epitome, the shining star, the touch stone, the ultimate example of hacky code.
This desperately needs turning into grown-up code.

This code makes bunny's eyes bleed. :)

8.1 replace the parser.
	Rolling my own (non-generic) parser is just so f**king stupid. Rip this out and replace with a yacc
	based version. Make the node handing code be a set of functions that can be called from yacc. Also
	change the input to plugins like the output and make this all loverly.

8.2 strings
    Need to implement a proper string table and hash lookup. This will save time copying strings and
	effort during searching. Also, this string table could be exported in the file and the linker and
	processor use the same string table and lookups.

8.3 lists
    The linked lists I use are stupid. They should be based on the same code, handle end addition better
	and use the hashes that will be generated by the string table.

8.4 file format.
   The file formats (the intermediate) does not have a size at the front. That means it is not properly
   backwards compatible. This should be fixed. It might also make sense to rationalise the record types
   now I know what they all are.

 
9. Constants/Constant

This is wrong. The @constants is correct as this will allow for a group of constants to be formed. BUT, there
should also be a @constant that is named. This will allow for properly named constants to be accessed.  Also
they will/can be laid out with descriptions.

10. Install layout

Code currently contains a really nasty hack, that looks in the build-tree $(BUILD_ROOT)/output for the plugins
this is only good for development and the install tree should be created. Also, this should hold the other 
files that will be needed. i.e. the javascript for the HTML plugin. That is another structure that needs to
be created, probably a root like:

    .doc_gen
	|
	+----plugins
	|    +------- html.so
	|    +------- manpage.so
	|
	*----outputs
	     +------- html
		 .        +------ doc_gen_javascript.js
         .
		 .

Not sure if the contents of the output directory for the type, should be copied into the target directory or
it should be upto the plugin to decide. It's probably best left to the plugin to decide what needs to be moved.

11. markdown comments

The output files really need comments so that they can be added to source control and have all the other boring
stuff they need. Also, adding things like editing rules, notes never hurt.

Obviously need a build flag that will allow comments to be build into the documents. If going to have this then
it might as well have typed comments i.e. "developer","review", etc.. So the type of comment in the code can be
specified.

12. Markdown in text

The "from program" text is not being processed for markdown. I only think it needs to read the bold and emp 
fields. All the rest can be ignored. Also, when references are added this should be able to reference the
references.

13. Add Fields

This was originally in the idea but has been dropped. I want fields for records. This will allow for a message
to be defined and the fields added. This will also work for data types so that complex code can define data
types properly and add those in. It will also help with some of the other languages that are planned.

I think fields should be simple things. They should either belong to a @type,@record or @message.

@field	name	size	description

Description will be multiline as this makes sense.

i.e.

/**---------------------------------------------------------*
 * @record		log_message
 * @description
 *
 * This is the structure of the log message that is written 
 * to the process log, it is used to track stuff.
 *
 * @field	date 	WORD	This the date/time for the log message.
 * @field	id		WORD	The id of the process making the log.
 * @field	who		WORD	The user id that caused the log.
 * @field	size	LONG	The size of the log message.
 * @field	message	BYTE*	The log message itself.
 *----------------------------------------------------------*/

Obviously this structure will obey the grouping, also if it is a message, the sequence diagram will reference
it.

14. References.


