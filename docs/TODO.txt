
1. Memory Leaks

There are definitely memory leaks in the handling of the triggers in the linker.
The arrays that are added to the node are not cleared down.

2. Name allocation

Will have to replace what I have with a lookup table and proper allocation. Too much memory is being used and the names are having to be copied.
Also must use hashes to make the searches quicker.


3. Functions/Activations

This is wrong. What I have currently called a function is actually an activation.

It needs to change so when the C based stuff is include within the build then it can use the function name.

I might be worth adding a "procedure" name into the system to allow for RPC to be done. But is that any different to a @send???

Also, need to add code to allow for the order of the items to be changed. This will be a configuration option.


4. Efficiency

Some of the atoms lists are being searched to add to the end. What is required is an end of list pointer to handle this without searching.


6. Duplication

The message now has a redundant field (timeline) as sender has that information.

7. Add the code stuff.

It would be nice if the API functions for code where added. It would allow for the docs to be use a specifications.

8. Configuration

Not sure what I want to do here. Not sure if this should be a command line option and/or a marker in the source file. i.e. like the
/*cim: */ style marker that works for vim. So the magic can be added to the file and kept in the same place without additional configuration
files to be kept. Also, may need to be able to do this by output type. So, [config://pdf-<list of configuration variables>]. These could be
placed at the start/end of the file and then filtered out of the final result.

9. @snippet - @end_snippet

To handle being able to put macros and other lumps of codes in the documentation add the snippet pair. This also
will allow for bits of the source that you want to add to the docs that the current atoms do not handle.


10. De-HACKify

This code is the epitome, the shining star, the touch stone, the ultimate example of hacky code.
This desperately needs tuning into grown-up code. Some of this code really hurts my eyes.

This code makes bunny's eyes bleed. :)

10.1 parse_line
    Not much to say about this except it is one big monster. Needs splitting into smaller functions and
	make the main function loop a switch/state_machine.

10.2 strings
    Need to implement a proper string table and hash lookup. This will save time copying strings and
	effort during searching. Also, this string table could be exported in the file and the linker and
	processor use the same string table and lookups.

10.3 lists
    The linked lists I use are stupid. They should be based on the same code, handle end addition better
	and use the hashes that will be generated by the string table.

10.4 file format.
   The file formats (the intermediate) does not have a size at the front. That means it is not properly
   backwards compatible. This should be fixed. It might also make sense to rationalise the record types
   now I know what they all are.

